plugins {
    id 'java-library'
    id 'maven-publish'
    id 'idea'
    id 'net.neoforged.moddev' version '2.0.77'
    id 'com.diffplug.spotless' version '7.1.0'
    id 'checkstyle'
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    maven { url = "https://api.modrinth.com/maven" }
    exclusiveContent {
        forRepository {
            maven {
                url "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroup("software.bernie.geckolib")
        }
    }
    maven {
        name = 'Shedaniel'
        url 'https://maven.shedaniel.me'
        content {
            includeGroup("me.shedaniel")
            includeGroup("me.shedaniel.cloth")
            includeGroup("dev.architectury")
        }
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    // Specify the version of NeoForge to use.
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers.add('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        client2 {
            client()
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
            programArguments.addAll('--username', 'Dev2')
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            clientData()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }

    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    implementation "software.bernie.geckolib:geckolib-neoforge-${minecraft_version}:${geckolib_version}"

    implementation "dev.architectury:architectury-neoforge:${architectury_version}"
    implementation "me.shedaniel:RoughlyEnoughItems-neoforge:${rei_version}"
    implementation "me.shedaniel.cloth:cloth-config-neoforge:${cloth_config_version}"

    implementation "maven.modrinth:sophisticated-core:${sophisticated_core_version}"
    implementation "maven.modrinth:sophisticated-backpacks:${sophisticated_backpacks_version}"

    runtimeOnly "curse.maven:sodium-394468:${sodium_version}"
    runtimeOnly "curse.maven:spark-361579:${spark_version}"
    runtimeOnly "curse.maven:jade-324717:${jade_version}"
    runtimeOnly "curse.maven:resourceful-config-714059:${resourceful_config_version}"
    runtimeOnly "curse.maven:structure-layout-optimizer-1087831:${structure_layout_optimizer_version}"
    runtimeOnly "curse.maven:commandstructures-565119:${command_structures_version}"
    runtimeOnly "curse.maven:huge-structure-blocks-474114:${huge_structure_blocks_version}"
    runtimeOnly "curse.maven:building-wands-363392:${building_wands_version}"
    runtimeOnly "curse.maven:worldedit-225608:${worldedit_version}"

    /* Builders Dependencies
    For Themes: */
    runtimeOnly "curse.maven:block-variants-481119:${block_variants_version}" // Breaks chunks, and more
    runtimeOnly "curse.maven:chisel-reborn-551763:${chisel_reborn_version}"
    runtimeOnly "curse.maven:oh-the-biomes-weve-gone-1070751:${otbwg_version}"
    runtimeOnly "curse.maven:oh-the-trees-youll-grow-962544:${ottyg_version}"
    runtimeOnly "curse.maven:stoneworks-852663:${stoneworks_version}"
    runtimeOnly "curse.maven:ametrin-api-670599:${ametrin_api_version}"
    runtimeOnly "curse.maven:corgilib-693313:${corgilib_version}"
    runtimeOnly "curse.maven:terrablender-940057:${terrablender_version}"
    runtimeOnly "curse.maven:cryonic-config-1208896:${cryonic_config_version}"
    runtimeOnly "curse.maven:puzzles-lib-495476:${puzzles_lib_version}"

    /*Rest:
    runtimeOnly "curse.maven:balm-531761:${balm_version}"
    runtimeOnly "curse.maven:collective-342584:${collective_version}"
    runtimeOnly "curse.maven:controlling-250398:${controlling_version}"
    runtimeOnly "curse.maven:dusty-decorations-843344:${dusty_decorations_version}"
    runtimeOnly "curse.maven:dynamic-fps-335493:${dynamic_fps_version}"
    runtimeOnly "curse.maven:fast-item-frames-1210171:${fast_item_frames_version}"
    runtimeOnly "curse.maven:ferrite-core-429235:${ferrite_core_version}"
    runtimeOnly "curse.maven:fusion-854949:${fusion_version}"
    runtimeOnly "curse.maven:glassential-renewed-945149:${glassential_version}"
    runtimeOnly "curse.maven:iris-455508:${iris_version}"
    runtimeOnly "curse.maven:kotlin-for-forge-351264:${kotlin_for_forge_version}"
    runtimeOnly "curse.maven:lithium-360438:${lithium_version}"
    runtimeOnly "curse.maven:modernfix-790626:${modernfix_version}"
    runtimeOnly "curse.maven:more-culling-630104:${more_culling_version}"
    runtimeOnly "curse.maven:mouse-tweaks-60089:${mouse_tweaks_version}"
    runtimeOnly "curse.maven:no-chat-reports-634062:${no_chat_reports_version}"
    runtimeOnly "curse.maven:searchables-858542:${searchables_version}"
    runtimeOnly "curse.maven:sodium-extra-447673:${sodium_extra_version}"
    runtimeOnly "curse.maven:supermartijn642-config-lib-438332:${sm642_config_version}"
    runtimeOnly "curse.maven:supermartijn642-core-lib-454372:${sm642_core_version}"
    runtimeOnly "curse.maven:trashslot-235577:${trashslot_version}"
    runtimeOnly "curse.maven:zume-927564:${zume_version}"
    End Builders Dependencies */

    runtimeOnly "maven.modrinth:shut-up-rei:1.0"
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [minecraft_version      : minecraft_version,
                             minecraft_version_range: minecraft_version_range,
                             neo_version            : neo_version,
                             neo_version_range      : neo_version_range,
                             loader_version_range   : loader_version_range,
                             mod_id                 : mod_id,
                             mod_name               : mod_name,
                             mod_license            : mod_license,
                             mod_version            : mod_version,
                             mod_authors            : mod_authors,
                             mod_description        : mod_description,
                             sophisticated_backpacks_version_range : sophisticated_backpacks_version_range]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask generateModMetadata

spotless {
    java {
        toggleOffOn()
        cleanthat()
                .version('2.23')
                .sourceCompatibility('1.21.0')
                .addMutator('SafeAndConsensual')
                .addMutator('SafeButNotConsensual')
                .excludeMutator('UnnecessaryModifier')
        importOrder('', 'javax|java', '\\#')
        removeUnusedImports()
        // apply a specific flavor of google-java-format
        eclipse('4.35')
                .configFile("config/spotless/formatter.xml")
        // fix formatting of type annotations
        formatAnnotations()
        // make sure every file has the following copyright header.
        // optionally, Spotless can set copyright years by digging
        // through git history (see "license" section below)
        // licenseHeader '/* (C)$YEAR */'
    }
    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '.gitattributes', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        leadingTabsToSpaces()
        endWithNewline()
    }
}

checkstyle {
    toolVersion = '10.23.0'
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
